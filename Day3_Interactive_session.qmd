---
title: "Day 3 Interactive Session"
format: html
editor: visual
---

```{r}
library(palmerpenguins)
library(tidyverse)
```

## Conditional Statements

```{r}
temperature <- 95

#if statement
if (temperature > 97) {
  print("Temperature warning")
} else 
  print ("No temperature warning")


```

Make an if else statement for blue whale lengths. Make a variable blue whale, which has a value of 40. Add an if else statement that returns 'GIANT" if the length exceeds 35, 'MEDIUM' if the length is between 20 and 35, or 'SMALL' if the length is \<=20

```{r}
blue_whale <- 40
if (blue_whale > 35) {
  print('GIANT')
} else if (blue_whale >= 20 & blue_whale <=35 ) {
  print('MEDIUM')
 } else if (blue_whale <= 20){
  print('SMALL')
}
```

## Switch statement

```{r}
housing_type <- 'whole'

#making a switch where based on that value we will do different things
switch(housing_type,
       'single' = print('400'),
       'double' = print('750'),
       'whole' = print('1100'))
#which one of these statements matches the value 

if (housing_type == "whole") {
  print("1100")
} else if (housing_type == 'double') {
  print('750')
} else if (housing_type == 'single') {
  print('400')
}
```

## For loops

```{r}
height <- c(58, 61, 65, 72, 89, 94)

#iterate over each of these and do something with each of these values, seq_along returns 1,2,3,4,5,6,7. will give us values we will call based on position
#height [i] is ith term in the sequence

for (i in seq_along(height)) {
  half_height = height[i] / 2
  print(half_height)
}

#for each value in the height vector, return the sum of the value + the value right after it.

for(i in seq_along(height)) {
  add_height = height[i]+height[i+1]
  print(add_height)
}

#NA because 101 doesn't have anything to add, because it extends beyond the length of the vector



# Write a for loop that calculates the value of height of each element divided by the mean of the entire height vector

mean_height <- mean(height)

for (i in seq_along(height)) {
  div_height = height[i] / mean_height
  print(div_height)
}
```

Write a for loop with a conditional if statement that returns the means of all numeric variables in the penguins dataset

-   is.numeric (asks is this thing numeric?)

-   mean(vec,na.rm = TRUE)

```{r}
#to iterate each column in the data frame, only evaluate the mean if the column is numeric, is that the data in each column for the ith index

for(i in seq_along(penguins)){
  if (is.numeric(penguins[[i]])) {
    penguins_mean <- mean(penguins[[i]], na.rm=TRUE)
    print(penguins_mean)
  }
}

```

## Functional Programming for easier iteration

Use apply() to iterate over rows or columns. MARGIN=1 (rows), MARGIN = 2 (columns)

```{r}
#finding the median of each of the columns
apply(X= mtcars, MARGIN = 2, FUN = median)

apply(mtcars, 2, median)
```

## dplyr::across()

starter: mean flipper length of penguins by species

```{r}
#whatever is done next, apply to different groups seperately , group by identifies groups and will do it by group in an organized table. 

penguins %>% 
  group_by(species, sex, island) %>%
  summarize(mean_flipper_length = mean(flipper_length_mm, na.rm = TRUE),
            sd_flipper_length =sd(flipper_length_mm, na.rm = TRUE),
            max_body_mass = max(body_mass_g, na.rm = TRUE))
```

```{r}
#calculates mean across each species group 
penguins %>% 
  group_by(species, island) %>% 
  summarize(across(where(is.numeric),  mean, na.rm = TRUE))
```

## Detecting a string pattern

```{r}
food <- "I love enchiladas"

if (str_detect(food, "burritos")) {
  print("yay burritos")
} else{
  print('What about burritos?')
}
```
